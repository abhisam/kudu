commit 8c9db13123382b0f153bec5e199a33e89a466d5a
Author: Todd Lipcon <todd@cloudera.com>
Date:   Thu Jun 13 15:09:19 2019 -0700

    Remove compile-time checks for OpenSSL > 1.0.0
    
    This is a cross-port of IMPALA-5849 (ac8a72f3041688316a20c9a85e) which
    changed compile-time checks for OpenSSL 1.1 to runtime checks. This code
    has been in Impala since August 2017.
    
    Change-Id: I8d289d0b237ea821567bf9ae757737b05b594c4c

diff --git a/squeasel.c b/squeasel.c
index 9d92cf7..86fb054 100644
--- a/squeasel.c
+++ b/squeasel.c
@@ -150,6 +150,7 @@ typedef int socklen_t;
 
 static const char *http_500_error = "Internal Server Error";
 
+#include <openssl/crypto.h>
 #include <openssl/ssl.h>
 #include <openssl/err.h>
 
@@ -162,6 +163,8 @@ static const char *http_500_error = "Internal Server Error";
 #define SSL_OP_NO_TLSv1_1 0x10000000U
 #endif
 
+#define OPENSSL_MIN_VERSION_WITH_TLS_1_1 0x10001000L
+
 static const char *month_names[] = {
   "Jan", "Feb", "Mar", "Apr", "May", "Jun",
   "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
@@ -4261,8 +4264,16 @@ static int set_ssl_option(struct sq_context *ctx) {
   if (sq_strcasecmp(ssl_version, "tlsv1") == 0) {
     // No-op - don't exclude any TLS protocols.
   } else if (sq_strcasecmp(ssl_version, "tlsv1.1") == 0) {
+    if (SSLeay() < OPENSSL_MIN_VERSION_WITH_TLS_1_1) {
+      cry(fc(ctx), "Unsupported TLS version: %s", ssl_version);
+      return 0;
+    }
     options |= SSL_OP_NO_TLSv1;
   } else if (sq_strcasecmp(ssl_version, "tlsv1.2") == 0) {
+    if (SSLeay() < OPENSSL_MIN_VERSION_WITH_TLS_1_1) {
+      cry(fc(ctx), "Unsupported TLS version: %s", ssl_version);
+      return 0;
+    }
     options |= (SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1);
   } else {
     cry(fc(ctx), "%s: unknown SSL version: %s", __func__, ssl_version);
@@ -4285,7 +4296,11 @@ static int set_ssl_option(struct sq_context *ctx) {
     return 0;
   }
 
-  SSL_CTX_set_options(ctx->ssl_ctx, options);
+  if ((SSL_CTX_set_options(ctx->ssl_ctx, options) & options) != options) {
+    cry(fc(ctx), "SSL_CTX_set_options (server) error: could not set options (%d)",
+        options);
+    return 0;
+  }
 
   if (ctx->config[SSL_PRIVATE_KEY_PASSWORD] != NULL) {
     SSL_CTX_set_default_passwd_cb(ctx->ssl_ctx, ssl_password_callback);
